% property(name, owner, mortgage, house, hotel, groupNumber, price, baserent, arrayIndex).
% player(name, actualPosition, actualMoney, jail, dlv).

groupNumberOfProperty(0,12).
groupNumberOfProperty(1,4).
groupNumberOfProperty(2,2).
groupNumberOfProperty(3,2).
groupNumberOfProperty(4,3).
groupNumberOfProperty(5,3).
groupNumberOfProperty(6,3).
groupNumberOfProperty(7,3).
groupNumberOfProperty(8,3).
groupNumberOfProperty(9,3).
groupNumberOfProperty(10,2).
groupHousePrice(0,0).
groupHousePrice(1,0).
groupHousePrice(2,0).
groupHousePrice(3,50).
groupHousePrice(4,50).
groupHousePrice(5,100).
groupHousePrice(6,100).
groupHousePrice(7,150).
groupHousePrice(8,150).
groupHousePrice(9,200).
groupHousePrice(10,200).
spentMoney(0).

limitMoney(MONEY) :- player(_,_,A,_,_), MONEY = A/3 . %Max 30% actual

canBuyHouse(GROUP) :- groupNumberOfProperty(GROUP,NUMBER), #count{P: property(_,_,_,_,_,GROUP,_,_,P)} = NUMBER.

groupLevel(GROUP,LEVEL) :- canBuyHouse(GROUP), #min{HOUSE: property(_,_,_,HOUSE,_,GROUP,_,_,_)} = LEVEL. 
groupLevel(GROUP,LEVEL) :- buyHouse(PROP, L), property(_,_,_,HOUSE,_,GROUP,_,_,PROP), groupLevel(GROUP, L), LEVEL = L + 1, LEVEL < 5.
buyHouse(PROP,LEVEL) | notBuyHouse(PROP,LEVEL) :- property(_,_,_,HOUSE,_,GROUP,_,_,PROP), canBuyHouse(GROUP), groupLevel(GROUP,LEVEL), HOUSE < 5, HOUSE = LEVEL.
buyHouse(PROP, LEVEL) | notBuyHouse(PROP, LEVEL) :- buyHouse(PROP,OLD), property(_,_,_,_,_,GROUP,_,_,PROP), groupLevel(GROUP,OLD), OLD < 5, OLD + 1 = LEVEL.
spentMoney(MONEY) :- #sum{X, PROP, LEV: buyHouse(PROP,LEV), property(_,_,_,_,_,G,_,_,PROP), groupHousePrice(G, X)} = MONEY.
:- notBuyHouse(PROP, LEVEL), buyHouse(_, Y), LEVEL + 1 = Y.
:- limitMoney(MONEY), #max{SPENT: spentMoney(SPENT)} = SPENTMONEY, MONEY < SPENTMONEY.
:~ notBuyHouse(PROP,_). [1@1, PROP]