% property(name, owner, mortgage, house, hotel, groupNumber, price, baserent, arrayIndex).
% number(value, "whoAmI"), my index
% number(value, "limit")

% OUTPUT :
% booleanValue(true o false) se si decide o no di fare unofferta
% propertyOffer(Price, Property) dentro java sommiamo tutti i price per ottenere la somma finale. Non è stato possibile farlo dentro dlv causa problemi con aggregati ricorsivi
% tradeMoney(Property,_,_,_) proprietà richieste per cui si offre denaro
% tradeProperty(Property,_,_) proprietà richieste per cui si offrono altre proprietà
% propertyCounterPart(Property,_), proprietà che do in cambio di altre

% valore del gruppo che serve per calcolare il valore monetario di una proprietà
groupValue(3,10).
groupValue(4,15).
groupValue(5,20).
groupValue(6,25).
groupValue(7,30).
groupValue(8,35).
groupValue(9,40).
groupValue(10,45).
groupValue(1,50).
groupValue(2,50).

% proprietà possedute dallattuale player
myProperty(P,G) :- property(_,O,_,_,_,G,_,_,P), number(O,"whoAmI").

% numero di proprietà per ogni gruppo che ho
groupNumberOfProperty(G,N) :- myProperty(P,G), #count{X : myProperty(X,G)} = N.

% tutte le proprietà che POTREMMO volere, cioè che potrebbero aggiungersi ai gruppi di cui ho già almeno 2 proprietà
interestingProperty(I,P,M,G) :- groupNumberOfProperty(G,N), N > 1, property(_,O,M,_,_,G,P,_,I), not number(O, "whoAmI").

% proprietà da poter offire
propertyTradeable(I,P) :- myProperty(I,G), property(_,_,"true",_,_,G,Price,_,I), G != 1, G != 2, groupNumberOfProperty(G,1), P = Price/2.
propertyTradeable(I,P) :- myProperty(I,G), property(_,_,"false",_,_,G,P,_,I), G != 1, G != 2, groupNumberOfProperty(G,1).

% decido cosa fare per ogni proprietà interessante
tradeMoney(I,P,M,G) | tradeProperty(I,P,M) | notTrade(I) :- interestingProperty(I,P,M,G).

% calcolo le offerte in denaro che potrei fare per ogni proprietà in base ad un punteggio calcolato sul valore del gruppo e sulle proprietà possedute
propertyOffer(Price, Property) :- tradeMoney(Property,P,"false",G), groupNumberOfProperty(G,N), groupValue(G,V), Price = P + 10*N + V.
propertyOffer(Price, Property) :- tradeMoney(Property,P,"true",G), groupNumberOfProperty(G,N), groupValue(G,V), Price = P/2 + 10*N + V.
:- #sum{X,P : propertyOffer(X,P)} = V, number(L,"limit"), V > L.

% calcolo le differenze di prezzo tra le proprietà che sono disposto a cedere e quelle che voglio
% in modo che posso minimizzare la differenza e offrire quella con il prezzo più vicino
difference(A,B,D) :- propertyTradeable(A,P1), tradeProperty(B,P2,"true"), P2/2 > P1, D = P2/2 - P1.
difference(A,B,D) :- propertyTradeable(A,P1), tradeProperty(B,P2,"false"), P2 > P1, D = P2 - P1.
difference(A,B,D) :- propertyTradeable(A,P1), tradeProperty(B,P2,"true"), P1 >= P2/2, D = P1 - P2/2.
difference(A,B,D) :- propertyTradeable(A,P1), tradeProperty(B,P2,"false"), P1 >= P2, D = P1 - P2.
propertyCounterPart(A,B) :- difference(A,B,D), D = #min{X : difference(_,B,X)}.
:- propertyCounterPart(A,B), propertyCounterPart(C,B), A != C.
existsCounterPart(B) :- propertyCounterPart(_,B).
:- tradeProperty(P,_,_), not existsCounterPart(P).

% true se faccio un'offerta, false altrimenti
booleanValue("true") | booleanValue("false").
doTrade :- tradeMoney(_,_,_,_).
doTrade :- tradeProperty(_,_,_).
:- booleanValue("true"), not doTrade.

% tra dare soldi e dare proprietà preferiamo dare soldi. Principalmente, cerchiamo di ottenere più proprietà possibili
:~ notTrade(P). [1@3, P]
:~ propertyCounterPart(X,_). [1@2, X]
:~ tradeMoney(P,_,_,_). [1@1, P]
