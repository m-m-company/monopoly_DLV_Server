% property(name, owner, mortgage, house, hotel, groupNumber, price, baserent, arrayIndex).
property("name",1,"false",0,0,3,100,0,1).
property("name",1,"false",0,0,3,100,0,2).
property("name",2,"false",0,0,3,100,0,3).
% player(name, position, money, jail, bidding, index)
player("name",0,1000,"false","true",1).
player("name",0,1000,"false","true",2).
% number(value, "whoAmI"), my index
number(1, "whoAmI").
% number(value, "limit")
number(600,"limit").

% OUTPUT :
% booleanValue(true o false) se si decide o no di fare unofferta
% number(value, "money")
% number(value, "propertyOffered")
% number(value, "propertyRequested")

groupValue(3,10).
groupValue(4,15).
groupValue(5,20).
groupValue(6,25).
groupValue(7,30).
groupValue(8,35).
groupValue(9,40).
groupValue(10,45).
groupValue(1,50).
groupValue(2,50).

% proprietà possedute dallattuale player
myProperty(P,G) :- property(_,O,_,_,_,G,_,_,P), number(O,"whoAmI").

% numero di proprietà per ogni gruppo che ho
groupNumberOfProperty(G,N) :- myProperty(P,G), #count{X : myProperty(X,G)} = N.

% proprietà da poter offire
propertyTradeable(I,P) :- myProperty(I,G), property(_,_,"true",_,_,G,Price,_,I), G != 1, G != 2, groupNumberOfProperty(G,1), P = Price/2.
propertyTradeable(I,P) :- myProperty(I,G), property(_,_,"false",_,_,G,P,_,I), G != 1, G != 2, groupNumberOfProperty(G,1).

% tutte le proprietà che POTREMMO volere
interestingProperty(I,P,M,G) :- groupNumberOfProperty(G,_), property(_,O,M,_,_,G,P,_,I), not number(O, "whoAmI").

tradeMoney(P) | tradeProperty(P) | notTrade(P) :- interestingProperty(P,_,_,_).

propertyOffer(Price, Property) :- interestingProperty(Property,P,"false",G), groupNumberOfProperty(G,N), groupValue(G,V), Price = P + 10*N + V.
propertyOffer(Price, Property) :- interestingProperty(Property,P,"true",G), groupNumberOfProperty(G,N), groupValue(G,V), Price = P/2 + 10*N + V.
:- tradeMoney(P), propertyOffer(Price,P), number(L,"limit"), Price >= L.

difference(A,B,D) :- propertyTradeable(A,P1), interestingProperty(B,P2,"true",_), P2 > P1, D = P2/2 - P1.
difference(A,B,D) :- propertyTradeable(A,P1), interestingProperty(B,P2,"false",_), P2 > P1, D = P2 - P1.
difference(A,B,D) :- propertyTradeable(A,P1), interestingProperty(B,P2,"true",_), P1 >= P2, D = P1 - P2/2.
difference(A,B,D) :- propertyTradeable(A,P1), interestingProperty(B,P2,"false",_), P1 >= P2, D = P1 - P2.
alreadyUsed(A) :- propertyCounterPart(A,_).
propertyCounterPart(A,B) :- difference(A,B,D), D = #min{X : difference(_,B,X)}, not alreadyUsed(A).
notExistsCounterPart(B) :- interestingProperty(B,_,_,_), propertyTradeable(A,_), not propertyCounterPart(A,B).
notExistsCounterPart(B) :- interestingProperty(B,_,_,_), #count{X : propertyTradeable(X,_)} = 0.
:- tradeProperty(P), notExistsCounterPart(P).
:- propertyCounterPart(A,B), propertyCounterPart(C,B), A != C.

%number(V,"money") :- tradeMoney(_), #sum{X,P : tradeMoney(P), propertyOffer(X,P)} = V.
%:- number(V,"money"), number(L,"limit"), V > L.

%number(A,"propertyOffered") :- propertyCounterPart(A,_).
%number(B,"propertyRequested") :- tradeProperty(B), propertyCounterPart(_,B).
%number(B,"propertyRequested") :- tradeMoney(B), propertyOffer(_,B).

booleanValue("true") | booleanValue("false").
booleanValue("true") :- tradeMoney(_).
booleanValue("true") :- tradeProperty(_).

% tra dare soldi e dare proprietà preferiamo dare soldi
:~ number(X, "propertyOffered"). [1@2, X]
:~ number(X, "money"). [X@1]
:~ notTrade(P). [1@1, P]
